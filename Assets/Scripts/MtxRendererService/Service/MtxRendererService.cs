/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MtxRendererService
{
  public partial class MtxRendererService {
    public interface ISync {
      void Ping();
      void Shutdown();
      void Freeze();
      void Thaw();
      void Pause();
      void Resume();
      void Clear();
      List<sbyte> GetPreferedFieldSize();
      void LoadLevel(List<List<List<List<short>>>> field, LevelInfo levelInfo);
      void ResetLevel(List<List<List<List<short>>>> field);
      void Spawn(short objId, sbyte symbol, short positionX, short positionY);
      void @Remove(short objectId, short sourceId);
      void Collect(short objectId, short sourceId);
      void TriggerEnter(short objectId, short sourceId);
      void TriggerLeave(short objectId, short sourceId);
      void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY);
      void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      void End_Ping(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Shutdown(AsyncCallback callback, object state);
      void End_Shutdown(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Freeze(AsyncCallback callback, object state);
      void End_Freeze(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Thaw(AsyncCallback callback, object state);
      void End_Thaw(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Pause(AsyncCallback callback, object state);
      void End_Pause(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Resume(AsyncCallback callback, object state);
      void End_Resume(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Clear(AsyncCallback callback, object state);
      void End_Clear(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetPreferedFieldSize(AsyncCallback callback, object state);
      List<sbyte> End_GetPreferedFieldSize(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_LoadLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field, LevelInfo levelInfo);
      void End_LoadLevel(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ResetLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field);
      void End_ResetLevel(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Spawn(AsyncCallback callback, object state, short objId, sbyte symbol, short positionX, short positionY);
      void End_Spawn(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Remove(AsyncCallback callback, object state, short objectId, short sourceId);
      void End_Remove(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Collect(AsyncCallback callback, object state, short objectId, short sourceId);
      void End_Collect(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TriggerEnter(AsyncCallback callback, object state, short objectId, short sourceId);
      void End_TriggerEnter(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TriggerLeave(AsyncCallback callback, object state, short objectId, short sourceId);
      void End_TriggerLeave(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Move(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY);
      void End_Move(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Jump(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY);
      void End_Jump(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public void End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Ping();
      }

      #endif

      public void Ping()
      {
        #if !SILVERLIGHT
        send_Ping();
        recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null);
        End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      #else
      public void send_Ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Shutdown(AsyncCallback callback, object state)
      {
        return send_Shutdown(callback, state);
      }

      public void End_Shutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Shutdown();
      }

      #endif

      public void Shutdown()
      {
        #if !SILVERLIGHT
        send_Shutdown();
        recv_Shutdown();

        #else
        var asyncResult = Begin_Shutdown(null, null);
        End_Shutdown(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Shutdown(AsyncCallback callback, object state)
      #else
      public void send_Shutdown()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Call, seqid_));
        Shutdown_args args = new Shutdown_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Shutdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Shutdown_result result = new Shutdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Freeze(AsyncCallback callback, object state)
      {
        return send_Freeze(callback, state);
      }

      public void End_Freeze(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Freeze();
      }

      #endif

      public void Freeze()
      {
        #if !SILVERLIGHT
        send_Freeze();
        recv_Freeze();

        #else
        var asyncResult = Begin_Freeze(null, null);
        End_Freeze(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Freeze(AsyncCallback callback, object state)
      #else
      public void send_Freeze()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Freeze", TMessageType.Call, seqid_));
        Freeze_args args = new Freeze_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Freeze()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Freeze_result result = new Freeze_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Thaw(AsyncCallback callback, object state)
      {
        return send_Thaw(callback, state);
      }

      public void End_Thaw(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Thaw();
      }

      #endif

      public void Thaw()
      {
        #if !SILVERLIGHT
        send_Thaw();
        recv_Thaw();

        #else
        var asyncResult = Begin_Thaw(null, null);
        End_Thaw(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Thaw(AsyncCallback callback, object state)
      #else
      public void send_Thaw()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Thaw", TMessageType.Call, seqid_));
        Thaw_args args = new Thaw_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Thaw()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Thaw_result result = new Thaw_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Pause(AsyncCallback callback, object state)
      {
        return send_Pause(callback, state);
      }

      public void End_Pause(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Pause();
      }

      #endif

      public void Pause()
      {
        #if !SILVERLIGHT
        send_Pause();
        recv_Pause();

        #else
        var asyncResult = Begin_Pause(null, null);
        End_Pause(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Pause(AsyncCallback callback, object state)
      #else
      public void send_Pause()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Pause", TMessageType.Call, seqid_));
        Pause_args args = new Pause_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Pause()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Pause_result result = new Pause_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Resume(AsyncCallback callback, object state)
      {
        return send_Resume(callback, state);
      }

      public void End_Resume(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Resume();
      }

      #endif

      public void Resume()
      {
        #if !SILVERLIGHT
        send_Resume();
        recv_Resume();

        #else
        var asyncResult = Begin_Resume(null, null);
        End_Resume(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Resume(AsyncCallback callback, object state)
      #else
      public void send_Resume()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Resume", TMessageType.Call, seqid_));
        Resume_args args = new Resume_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Resume()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Resume_result result = new Resume_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Clear(AsyncCallback callback, object state)
      {
        return send_Clear(callback, state);
      }

      public void End_Clear(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Clear();
      }

      #endif

      public void Clear()
      {
        #if !SILVERLIGHT
        send_Clear();
        recv_Clear();

        #else
        var asyncResult = Begin_Clear(null, null);
        End_Clear(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Clear(AsyncCallback callback, object state)
      #else
      public void send_Clear()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Clear", TMessageType.Call, seqid_));
        Clear_args args = new Clear_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Clear()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Clear_result result = new Clear_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPreferedFieldSize(AsyncCallback callback, object state)
      {
        return send_GetPreferedFieldSize(callback, state);
      }

      public List<sbyte> End_GetPreferedFieldSize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPreferedFieldSize();
      }

      #endif

      public List<sbyte> GetPreferedFieldSize()
      {
        #if !SILVERLIGHT
        send_GetPreferedFieldSize();
        return recv_GetPreferedFieldSize();

        #else
        var asyncResult = Begin_GetPreferedFieldSize(null, null);
        return End_GetPreferedFieldSize(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPreferedFieldSize(AsyncCallback callback, object state)
      #else
      public void send_GetPreferedFieldSize()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPreferedFieldSize", TMessageType.Call, seqid_));
        GetPreferedFieldSize_args args = new GetPreferedFieldSize_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<sbyte> recv_GetPreferedFieldSize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPreferedFieldSize failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LoadLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field, LevelInfo levelInfo)
      {
        return send_LoadLevel(callback, state, field, levelInfo);
      }

      public void End_LoadLevel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LoadLevel();
      }

      #endif

      public void LoadLevel(List<List<List<List<short>>>> field, LevelInfo levelInfo)
      {
        #if !SILVERLIGHT
        send_LoadLevel(field, levelInfo);
        recv_LoadLevel();

        #else
        var asyncResult = Begin_LoadLevel(null, null, field, levelInfo);
        End_LoadLevel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LoadLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field, LevelInfo levelInfo)
      #else
      public void send_LoadLevel(List<List<List<List<short>>>> field, LevelInfo levelInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LoadLevel", TMessageType.Call, seqid_));
        LoadLevel_args args = new LoadLevel_args();
        args.Field = field;
        args.LevelInfo = levelInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LoadLevel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadLevel_result result = new LoadLevel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResetLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field)
      {
        return send_ResetLevel(callback, state, field);
      }

      public void End_ResetLevel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ResetLevel();
      }

      #endif

      public void ResetLevel(List<List<List<List<short>>>> field)
      {
        #if !SILVERLIGHT
        send_ResetLevel(field);
        recv_ResetLevel();

        #else
        var asyncResult = Begin_ResetLevel(null, null, field);
        End_ResetLevel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResetLevel(AsyncCallback callback, object state, List<List<List<List<short>>>> field)
      #else
      public void send_ResetLevel(List<List<List<List<short>>>> field)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Call, seqid_));
        ResetLevel_args args = new ResetLevel_args();
        args.Field = field;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ResetLevel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetLevel_result result = new ResetLevel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Spawn(AsyncCallback callback, object state, short objId, sbyte symbol, short positionX, short positionY)
      {
        return send_Spawn(callback, state, objId, symbol, positionX, positionY);
      }

      public void End_Spawn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Spawn();
      }

      #endif

      public void Spawn(short objId, sbyte symbol, short positionX, short positionY)
      {
        #if !SILVERLIGHT
        send_Spawn(objId, symbol, positionX, positionY);
        recv_Spawn();

        #else
        var asyncResult = Begin_Spawn(null, null, objId, symbol, positionX, positionY);
        End_Spawn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Spawn(AsyncCallback callback, object state, short objId, sbyte symbol, short positionX, short positionY)
      #else
      public void send_Spawn(short objId, sbyte symbol, short positionX, short positionY)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Spawn", TMessageType.Call, seqid_));
        Spawn_args args = new Spawn_args();
        args.ObjId = objId;
        args.Symbol = symbol;
        args.PositionX = positionX;
        args.PositionY = positionY;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Spawn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Spawn_result result = new Spawn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Remove(AsyncCallback callback, object state, short objectId, short sourceId)
      {
        return send_Remove(callback, state, objectId, sourceId);
      }

      public void End_Remove(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Remove();
      }

      #endif

      public void @Remove(short objectId, short sourceId)
      {
        #if !SILVERLIGHT
        send_Remove(objectId, sourceId);
        recv_Remove();

        #else
        var asyncResult = Begin_Remove(null, null, objectId, sourceId);
        End_Remove(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Remove(AsyncCallback callback, object state, short objectId, short sourceId)
      #else
      public void send_Remove(short objectId, short sourceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Remove", TMessageType.Call, seqid_));
        Remove_args args = new Remove_args();
        args.ObjectId = objectId;
        args.SourceId = sourceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Remove()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Remove_result result = new Remove_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Collect(AsyncCallback callback, object state, short objectId, short sourceId)
      {
        return send_Collect(callback, state, objectId, sourceId);
      }

      public void End_Collect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Collect();
      }

      #endif

      public void Collect(short objectId, short sourceId)
      {
        #if !SILVERLIGHT
        send_Collect(objectId, sourceId);
        recv_Collect();

        #else
        var asyncResult = Begin_Collect(null, null, objectId, sourceId);
        End_Collect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Collect(AsyncCallback callback, object state, short objectId, short sourceId)
      #else
      public void send_Collect(short objectId, short sourceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Collect", TMessageType.Call, seqid_));
        Collect_args args = new Collect_args();
        args.ObjectId = objectId;
        args.SourceId = sourceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Collect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Collect_result result = new Collect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TriggerEnter(AsyncCallback callback, object state, short objectId, short sourceId)
      {
        return send_TriggerEnter(callback, state, objectId, sourceId);
      }

      public void End_TriggerEnter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TriggerEnter();
      }

      #endif

      public void TriggerEnter(short objectId, short sourceId)
      {
        #if !SILVERLIGHT
        send_TriggerEnter(objectId, sourceId);
        recv_TriggerEnter();

        #else
        var asyncResult = Begin_TriggerEnter(null, null, objectId, sourceId);
        End_TriggerEnter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TriggerEnter(AsyncCallback callback, object state, short objectId, short sourceId)
      #else
      public void send_TriggerEnter(short objectId, short sourceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TriggerEnter", TMessageType.Call, seqid_));
        TriggerEnter_args args = new TriggerEnter_args();
        args.ObjectId = objectId;
        args.SourceId = sourceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TriggerEnter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TriggerEnter_result result = new TriggerEnter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TriggerLeave(AsyncCallback callback, object state, short objectId, short sourceId)
      {
        return send_TriggerLeave(callback, state, objectId, sourceId);
      }

      public void End_TriggerLeave(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TriggerLeave();
      }

      #endif

      public void TriggerLeave(short objectId, short sourceId)
      {
        #if !SILVERLIGHT
        send_TriggerLeave(objectId, sourceId);
        recv_TriggerLeave();

        #else
        var asyncResult = Begin_TriggerLeave(null, null, objectId, sourceId);
        End_TriggerLeave(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TriggerLeave(AsyncCallback callback, object state, short objectId, short sourceId)
      #else
      public void send_TriggerLeave(short objectId, short sourceId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TriggerLeave", TMessageType.Call, seqid_));
        TriggerLeave_args args = new TriggerLeave_args();
        args.ObjectId = objectId;
        args.SourceId = sourceId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TriggerLeave()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TriggerLeave_result result = new TriggerLeave_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Move(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      {
        return send_Move(callback, state, objectId, direction, fromX, fromY, toX, toY);
      }

      public void End_Move(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Move();
      }

      #endif

      public void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      {
        #if !SILVERLIGHT
        send_Move(objectId, direction, fromX, fromY, toX, toY);
        recv_Move();

        #else
        var asyncResult = Begin_Move(null, null, objectId, direction, fromX, fromY, toX, toY);
        End_Move(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Move(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      #else
      public void send_Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Move", TMessageType.Call, seqid_));
        Move_args args = new Move_args();
        args.ObjectId = objectId;
        args.Direction = direction;
        args.FromX = fromX;
        args.FromY = fromY;
        args.ToX = toX;
        args.ToY = toY;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Move()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Move_result result = new Move_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Jump(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      {
        return send_Jump(callback, state, objectId, direction, fromX, fromY, toX, toY);
      }

      public void End_Jump(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Jump();
      }

      #endif

      public void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      {
        #if !SILVERLIGHT
        send_Jump(objectId, direction, fromX, fromY, toX, toY);
        recv_Jump();

        #else
        var asyncResult = Begin_Jump(null, null, objectId, direction, fromX, fromY, toX, toY);
        End_Jump(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Jump(AsyncCallback callback, object state, short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      #else
      public void send_Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Jump", TMessageType.Call, seqid_));
        Jump_args args = new Jump_args();
        args.ObjectId = objectId;
        args.Direction = direction;
        args.FromX = fromX;
        args.FromY = fromY;
        args.ToX = toX;
        args.ToY = toY;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Jump()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Jump_result result = new Jump_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["Shutdown"] = Shutdown_Process;
        processMap_["Freeze"] = Freeze_Process;
        processMap_["Thaw"] = Thaw_Process;
        processMap_["Pause"] = Pause_Process;
        processMap_["Resume"] = Resume_Process;
        processMap_["Clear"] = Clear_Process;
        processMap_["GetPreferedFieldSize"] = GetPreferedFieldSize_Process;
        processMap_["LoadLevel"] = LoadLevel_Process;
        processMap_["ResetLevel"] = ResetLevel_Process;
        processMap_["Spawn"] = Spawn_Process;
        processMap_["Remove"] = Remove_Process;
        processMap_["Collect"] = Collect_Process;
        processMap_["TriggerEnter"] = TriggerEnter_Process;
        processMap_["TriggerLeave"] = TriggerLeave_Process;
        processMap_["Move"] = Move_Process;
        processMap_["Jump"] = Jump_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        try
        {
          iface_.Ping();
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Shutdown_args args = new Shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Shutdown_result result = new Shutdown_result();
        try
        {
          iface_.Shutdown();
          oprot.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Freeze_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Freeze_args args = new Freeze_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Freeze_result result = new Freeze_result();
        try
        {
          iface_.Freeze();
          oprot.WriteMessageBegin(new TMessage("Freeze", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Freeze", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Thaw_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Thaw_args args = new Thaw_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Thaw_result result = new Thaw_result();
        try
        {
          iface_.Thaw();
          oprot.WriteMessageBegin(new TMessage("Thaw", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Thaw", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Pause_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Pause_args args = new Pause_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Pause_result result = new Pause_result();
        try
        {
          iface_.Pause();
          oprot.WriteMessageBegin(new TMessage("Pause", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Pause", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Resume_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Resume_args args = new Resume_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Resume_result result = new Resume_result();
        try
        {
          iface_.Resume();
          oprot.WriteMessageBegin(new TMessage("Resume", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Resume", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Clear_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Clear_args args = new Clear_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Clear_result result = new Clear_result();
        try
        {
          iface_.Clear();
          oprot.WriteMessageBegin(new TMessage("Clear", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Clear", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPreferedFieldSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPreferedFieldSize_args args = new GetPreferedFieldSize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
        try
        {
          result.Success = iface_.GetPreferedFieldSize();
          oprot.WriteMessageBegin(new TMessage("GetPreferedFieldSize", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetPreferedFieldSize", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadLevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadLevel_args args = new LoadLevel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadLevel_result result = new LoadLevel_result();
        try
        {
          iface_.LoadLevel(args.Field, args.LevelInfo);
          oprot.WriteMessageBegin(new TMessage("LoadLevel", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("LoadLevel", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetLevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetLevel_args args = new ResetLevel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetLevel_result result = new ResetLevel_result();
        try
        {
          iface_.ResetLevel(args.Field);
          oprot.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Spawn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Spawn_args args = new Spawn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Spawn_result result = new Spawn_result();
        try
        {
          iface_.Spawn(args.ObjId, args.Symbol, args.PositionX, args.PositionY);
          oprot.WriteMessageBegin(new TMessage("Spawn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Spawn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Remove_args args = new Remove_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Remove_result result = new Remove_result();
        try
        {
          iface_.@Remove(args.ObjectId, args.SourceId);
          oprot.WriteMessageBegin(new TMessage("Remove", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Remove", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Collect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Collect_args args = new Collect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Collect_result result = new Collect_result();
        try
        {
          iface_.Collect(args.ObjectId, args.SourceId);
          oprot.WriteMessageBegin(new TMessage("Collect", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Collect", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TriggerEnter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TriggerEnter_args args = new TriggerEnter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TriggerEnter_result result = new TriggerEnter_result();
        try
        {
          iface_.TriggerEnter(args.ObjectId, args.SourceId);
          oprot.WriteMessageBegin(new TMessage("TriggerEnter", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TriggerEnter", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TriggerLeave_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TriggerLeave_args args = new TriggerLeave_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TriggerLeave_result result = new TriggerLeave_result();
        try
        {
          iface_.TriggerLeave(args.ObjectId, args.SourceId);
          oprot.WriteMessageBegin(new TMessage("TriggerLeave", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TriggerLeave", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Move_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Move_args args = new Move_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Move_result result = new Move_result();
        try
        {
          iface_.Move(args.ObjectId, args.Direction, args.FromX, args.FromY, args.ToX, args.ToY);
          oprot.WriteMessageBegin(new TMessage("Move", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Move", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Jump_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Jump_args args = new Jump_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Jump_result result = new Jump_result();
        try
        {
          iface_.Jump(args.ObjectId, args.Direction, args.FromX, args.FromY, args.ToX, args.ToY);
          oprot.WriteMessageBegin(new TMessage("Jump", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Jump", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Shutdown_args : TBase
    {

      public Shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Shutdown_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Shutdown_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Shutdown_result : TBase
    {

      public Shutdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Shutdown_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Shutdown_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Freeze_args : TBase
    {

      public Freeze_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Freeze_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Freeze_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Freeze_result : TBase
    {

      public Freeze_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Freeze_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Freeze_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Thaw_args : TBase
    {

      public Thaw_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Thaw_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Thaw_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Thaw_result : TBase
    {

      public Thaw_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Thaw_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Thaw_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Pause_args : TBase
    {

      public Pause_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Pause_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Pause_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Pause_result : TBase
    {

      public Pause_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Pause_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Pause_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Resume_args : TBase
    {

      public Resume_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Resume_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Resume_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Resume_result : TBase
    {

      public Resume_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Resume_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Resume_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Clear_args : TBase
    {

      public Clear_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Clear_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Clear_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Clear_result : TBase
    {

      public Clear_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Clear_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Clear_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPreferedFieldSize_args : TBase
    {

      public GetPreferedFieldSize_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPreferedFieldSize_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPreferedFieldSize_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPreferedFieldSize_result : TBase
    {
      private List<sbyte> _success;

      public List<sbyte> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPreferedFieldSize_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<sbyte>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      sbyte _elem2;
                      _elem2 = iprot.ReadByte();
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPreferedFieldSize_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
                foreach (sbyte _iter3 in Success)
                {
                  oprot.WriteByte(_iter3);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPreferedFieldSize_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadLevel_args : TBase
    {
      private List<List<List<List<short>>>> _field;
      private LevelInfo _levelInfo;

      public List<List<List<List<short>>>> Field
      {
        get
        {
          return _field;
        }
        set
        {
          __isset.field = true;
          this._field = value;
        }
      }

      public LevelInfo LevelInfo
      {
        get
        {
          return _levelInfo;
        }
        set
        {
          __isset.levelInfo = true;
          this._levelInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool field;
        public bool levelInfo;
      }

      public LoadLevel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Field = new List<List<List<List<short>>>>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      List<List<List<short>>> _elem6;
                      {
                        _elem6 = new List<List<List<short>>>();
                        TList _list7 = iprot.ReadListBegin();
                        for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                        {
                          List<List<short>> _elem9;
                          {
                            _elem9 = new List<List<short>>();
                            TList _list10 = iprot.ReadListBegin();
                            for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                            {
                              List<short> _elem12;
                              {
                                _elem12 = new List<short>();
                                TList _list13 = iprot.ReadListBegin();
                                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                                {
                                  short _elem15;
                                  _elem15 = iprot.ReadI16();
                                  _elem12.Add(_elem15);
                                }
                                iprot.ReadListEnd();
                              }
                              _elem9.Add(_elem12);
                            }
                            iprot.ReadListEnd();
                          }
                          _elem6.Add(_elem9);
                        }
                        iprot.ReadListEnd();
                      }
                      Field.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  LevelInfo = new LevelInfo();
                  LevelInfo.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadLevel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Field != null && __isset.field) {
            field.Name = "field";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Field.Count));
              foreach (List<List<List<short>>> _iter16 in Field)
              {
                {
                  oprot.WriteListBegin(new TList(TType.List, _iter16.Count));
                  foreach (List<List<short>> _iter17 in _iter16)
                  {
                    {
                      oprot.WriteListBegin(new TList(TType.List, _iter17.Count));
                      foreach (List<short> _iter18 in _iter17)
                      {
                        {
                          oprot.WriteListBegin(new TList(TType.I16, _iter18.Count));
                          foreach (short _iter19 in _iter18)
                          {
                            oprot.WriteI16(_iter19);
                          }
                          oprot.WriteListEnd();
                        }
                      }
                      oprot.WriteListEnd();
                    }
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (LevelInfo != null && __isset.levelInfo) {
            field.Name = "levelInfo";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            LevelInfo.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadLevel_args(");
        bool __first = true;
        if (Field != null && __isset.field) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Field: ");
          __sb.Append(Field);
        }
        if (LevelInfo != null && __isset.levelInfo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LevelInfo: ");
          __sb.Append(LevelInfo== null ? "<null>" : LevelInfo.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadLevel_result : TBase
    {

      public LoadLevel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadLevel_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadLevel_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetLevel_args : TBase
    {
      private List<List<List<List<short>>>> _field;

      public List<List<List<List<short>>>> Field
      {
        get
        {
          return _field;
        }
        set
        {
          __isset.field = true;
          this._field = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool field;
      }

      public ResetLevel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Field = new List<List<List<List<short>>>>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      List<List<List<short>>> _elem22;
                      {
                        _elem22 = new List<List<List<short>>>();
                        TList _list23 = iprot.ReadListBegin();
                        for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                        {
                          List<List<short>> _elem25;
                          {
                            _elem25 = new List<List<short>>();
                            TList _list26 = iprot.ReadListBegin();
                            for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                            {
                              List<short> _elem28;
                              {
                                _elem28 = new List<short>();
                                TList _list29 = iprot.ReadListBegin();
                                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                                {
                                  short _elem31;
                                  _elem31 = iprot.ReadI16();
                                  _elem28.Add(_elem31);
                                }
                                iprot.ReadListEnd();
                              }
                              _elem25.Add(_elem28);
                            }
                            iprot.ReadListEnd();
                          }
                          _elem22.Add(_elem25);
                        }
                        iprot.ReadListEnd();
                      }
                      Field.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ResetLevel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Field != null && __isset.field) {
            field.Name = "field";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.List, Field.Count));
              foreach (List<List<List<short>>> _iter32 in Field)
              {
                {
                  oprot.WriteListBegin(new TList(TType.List, _iter32.Count));
                  foreach (List<List<short>> _iter33 in _iter32)
                  {
                    {
                      oprot.WriteListBegin(new TList(TType.List, _iter33.Count));
                      foreach (List<short> _iter34 in _iter33)
                      {
                        {
                          oprot.WriteListBegin(new TList(TType.I16, _iter34.Count));
                          foreach (short _iter35 in _iter34)
                          {
                            oprot.WriteI16(_iter35);
                          }
                          oprot.WriteListEnd();
                        }
                      }
                      oprot.WriteListEnd();
                    }
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ResetLevel_args(");
        bool __first = true;
        if (Field != null && __isset.field) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Field: ");
          __sb.Append(Field);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetLevel_result : TBase
    {

      public ResetLevel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ResetLevel_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ResetLevel_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Spawn_args : TBase
    {
      private short _objId;
      private sbyte _symbol;
      private short _positionX;
      private short _positionY;

      public short ObjId
      {
        get
        {
          return _objId;
        }
        set
        {
          __isset.objId = true;
          this._objId = value;
        }
      }

      public sbyte Symbol
      {
        get
        {
          return _symbol;
        }
        set
        {
          __isset.symbol = true;
          this._symbol = value;
        }
      }

      public short PositionX
      {
        get
        {
          return _positionX;
        }
        set
        {
          __isset.positionX = true;
          this._positionX = value;
        }
      }

      public short PositionY
      {
        get
        {
          return _positionY;
        }
        set
        {
          __isset.positionY = true;
          this._positionY = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objId;
        public bool symbol;
        public bool positionX;
        public bool positionY;
      }

      public Spawn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Byte) {
                  Symbol = iprot.ReadByte();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I16) {
                  PositionX = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I16) {
                  PositionY = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Spawn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objId) {
            field.Name = "objId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjId);
            oprot.WriteFieldEnd();
          }
          if (__isset.symbol) {
            field.Name = "symbol";
            field.Type = TType.Byte;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteByte(Symbol);
            oprot.WriteFieldEnd();
          }
          if (__isset.positionX) {
            field.Name = "positionX";
            field.Type = TType.I16;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(PositionX);
            oprot.WriteFieldEnd();
          }
          if (__isset.positionY) {
            field.Name = "positionY";
            field.Type = TType.I16;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(PositionY);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Spawn_args(");
        bool __first = true;
        if (__isset.objId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjId: ");
          __sb.Append(ObjId);
        }
        if (__isset.symbol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Symbol: ");
          __sb.Append(Symbol);
        }
        if (__isset.positionX) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PositionX: ");
          __sb.Append(PositionX);
        }
        if (__isset.positionY) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PositionY: ");
          __sb.Append(PositionY);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Spawn_result : TBase
    {

      public Spawn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Spawn_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Spawn_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Remove_args : TBase
    {
      private short _objectId;
      private short _sourceId;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public short SourceId
      {
        get
        {
          return _sourceId;
        }
        set
        {
          __isset.sourceId = true;
          this._sourceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool sourceId;
      }

      public Remove_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I16) {
                  SourceId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Remove_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sourceId) {
            field.Name = "sourceId";
            field.Type = TType.I16;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(SourceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Remove_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.sourceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SourceId: ");
          __sb.Append(SourceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Remove_result : TBase
    {

      public Remove_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Remove_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Remove_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Collect_args : TBase
    {
      private short _objectId;
      private short _sourceId;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public short SourceId
      {
        get
        {
          return _sourceId;
        }
        set
        {
          __isset.sourceId = true;
          this._sourceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool sourceId;
      }

      public Collect_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I16) {
                  SourceId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Collect_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sourceId) {
            field.Name = "sourceId";
            field.Type = TType.I16;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(SourceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Collect_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.sourceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SourceId: ");
          __sb.Append(SourceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Collect_result : TBase
    {

      public Collect_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Collect_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Collect_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TriggerEnter_args : TBase
    {
      private short _objectId;
      private short _sourceId;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public short SourceId
      {
        get
        {
          return _sourceId;
        }
        set
        {
          __isset.sourceId = true;
          this._sourceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool sourceId;
      }

      public TriggerEnter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I16) {
                  SourceId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TriggerEnter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sourceId) {
            field.Name = "sourceId";
            field.Type = TType.I16;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(SourceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TriggerEnter_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.sourceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SourceId: ");
          __sb.Append(SourceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TriggerEnter_result : TBase
    {

      public TriggerEnter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TriggerEnter_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TriggerEnter_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TriggerLeave_args : TBase
    {
      private short _objectId;
      private short _sourceId;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      public short SourceId
      {
        get
        {
          return _sourceId;
        }
        set
        {
          __isset.sourceId = true;
          this._sourceId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool sourceId;
      }

      public TriggerLeave_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I16) {
                  SourceId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TriggerLeave_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.sourceId) {
            field.Name = "sourceId";
            field.Type = TType.I16;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(SourceId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TriggerLeave_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.sourceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SourceId: ");
          __sb.Append(SourceId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TriggerLeave_result : TBase
    {

      public TriggerLeave_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TriggerLeave_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TriggerLeave_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_args : TBase
    {
      private short _objectId;
      private Direction _direction;
      private short _fromX;
      private short _fromY;
      private short _toX;
      private short _toY;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Direction"/>
      /// </summary>
      public Direction Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }

      public short FromX
      {
        get
        {
          return _fromX;
        }
        set
        {
          __isset.fromX = true;
          this._fromX = value;
        }
      }

      public short FromY
      {
        get
        {
          return _fromY;
        }
        set
        {
          __isset.fromY = true;
          this._fromY = value;
        }
      }

      public short ToX
      {
        get
        {
          return _toX;
        }
        set
        {
          __isset.toX = true;
          this._toX = value;
        }
      }

      public short ToY
      {
        get
        {
          return _toY;
        }
        set
        {
          __isset.toY = true;
          this._toY = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool direction;
        public bool fromX;
        public bool fromY;
        public bool toX;
        public bool toY;
      }

      public Move_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Direction = (Direction)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I16) {
                  FromX = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I16) {
                  FromY = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I16) {
                  ToX = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I16) {
                  ToY = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.direction) {
            field.Name = "direction";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Direction);
            oprot.WriteFieldEnd();
          }
          if (__isset.fromX) {
            field.Name = "fromX";
            field.Type = TType.I16;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(FromX);
            oprot.WriteFieldEnd();
          }
          if (__isset.fromY) {
            field.Name = "fromY";
            field.Type = TType.I16;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(FromY);
            oprot.WriteFieldEnd();
          }
          if (__isset.toX) {
            field.Name = "toX";
            field.Type = TType.I16;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ToX);
            oprot.WriteFieldEnd();
          }
          if (__isset.toY) {
            field.Name = "toY";
            field.Type = TType.I16;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ToY);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.direction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direction: ");
          __sb.Append(Direction);
        }
        if (__isset.fromX) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromX: ");
          __sb.Append(FromX);
        }
        if (__isset.fromY) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromY: ");
          __sb.Append(FromY);
        }
        if (__isset.toX) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToX: ");
          __sb.Append(ToX);
        }
        if (__isset.toY) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToY: ");
          __sb.Append(ToY);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Move_result : TBase
    {

      public Move_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Move_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Move_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Jump_args : TBase
    {
      private short _objectId;
      private Direction _direction;
      private short _fromX;
      private short _fromY;
      private short _toX;
      private short _toY;

      public short ObjectId
      {
        get
        {
          return _objectId;
        }
        set
        {
          __isset.objectId = true;
          this._objectId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Direction"/>
      /// </summary>
      public Direction Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }

      public short FromX
      {
        get
        {
          return _fromX;
        }
        set
        {
          __isset.fromX = true;
          this._fromX = value;
        }
      }

      public short FromY
      {
        get
        {
          return _fromY;
        }
        set
        {
          __isset.fromY = true;
          this._fromY = value;
        }
      }

      public short ToX
      {
        get
        {
          return _toX;
        }
        set
        {
          __isset.toX = true;
          this._toX = value;
        }
      }

      public short ToY
      {
        get
        {
          return _toY;
        }
        set
        {
          __isset.toY = true;
          this._toY = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool objectId;
        public bool direction;
        public bool fromX;
        public bool fromY;
        public bool toX;
        public bool toY;
      }

      public Jump_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  ObjectId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Direction = (Direction)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I16) {
                  FromX = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I16) {
                  FromY = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I16) {
                  ToX = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I16) {
                  ToY = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Jump_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.objectId) {
            field.Name = "objectId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ObjectId);
            oprot.WriteFieldEnd();
          }
          if (__isset.direction) {
            field.Name = "direction";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Direction);
            oprot.WriteFieldEnd();
          }
          if (__isset.fromX) {
            field.Name = "fromX";
            field.Type = TType.I16;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(FromX);
            oprot.WriteFieldEnd();
          }
          if (__isset.fromY) {
            field.Name = "fromY";
            field.Type = TType.I16;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(FromY);
            oprot.WriteFieldEnd();
          }
          if (__isset.toX) {
            field.Name = "toX";
            field.Type = TType.I16;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ToX);
            oprot.WriteFieldEnd();
          }
          if (__isset.toY) {
            field.Name = "toY";
            field.Type = TType.I16;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(ToY);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Jump_args(");
        bool __first = true;
        if (__isset.objectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ObjectId: ");
          __sb.Append(ObjectId);
        }
        if (__isset.direction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direction: ");
          __sb.Append(Direction);
        }
        if (__isset.fromX) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromX: ");
          __sb.Append(FromX);
        }
        if (__isset.fromY) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromY: ");
          __sb.Append(FromY);
        }
        if (__isset.toX) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToX: ");
          __sb.Append(ToX);
        }
        if (__isset.toY) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToY: ");
          __sb.Append(ToY);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Jump_result : TBase
    {

      public Jump_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Jump_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Jump_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
