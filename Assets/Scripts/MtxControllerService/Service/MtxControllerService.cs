/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MtxControllerService
{
  public partial class MtxControllerService {
    public interface ISync {
      void Ping();
      short ConnectRenderer(string host, int port);
      void DisconnectRenderer(short rendererId);
      void MovePlayer(sbyte number, Direction direction);
      void JumpPlayer(sbyte number, Direction direction);
      List<string> GetGames();
      GameInfo GetGameInfo(string name);
      void LoadGame(string name);
      void ResetLevel();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      void End_Ping(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ConnectRenderer(AsyncCallback callback, object state, string host, int port);
      short End_ConnectRenderer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DisconnectRenderer(AsyncCallback callback, object state, short rendererId);
      void End_DisconnectRenderer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_MovePlayer(AsyncCallback callback, object state, sbyte number, Direction direction);
      void End_MovePlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_JumpPlayer(AsyncCallback callback, object state, sbyte number, Direction direction);
      void End_JumpPlayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetGames(AsyncCallback callback, object state);
      List<string> End_GetGames(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetGameInfo(AsyncCallback callback, object state, string name);
      GameInfo End_GetGameInfo(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_LoadGame(AsyncCallback callback, object state, string name);
      void End_LoadGame(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ResetLevel(AsyncCallback callback, object state);
      void End_ResetLevel(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public void End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Ping();
      }

      #endif

      public void Ping()
      {
        #if !SILVERLIGHT
        send_Ping();
        recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null);
        End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      #else
      public void send_Ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ConnectRenderer(AsyncCallback callback, object state, string host, int port)
      {
        return send_ConnectRenderer(callback, state, host, port);
      }

      public short End_ConnectRenderer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ConnectRenderer();
      }

      #endif

      public short ConnectRenderer(string host, int port)
      {
        #if !SILVERLIGHT
        send_ConnectRenderer(host, port);
        return recv_ConnectRenderer();

        #else
        var asyncResult = Begin_ConnectRenderer(null, null, host, port);
        return End_ConnectRenderer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ConnectRenderer(AsyncCallback callback, object state, string host, int port)
      #else
      public void send_ConnectRenderer(string host, int port)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ConnectRenderer", TMessageType.Call, seqid_));
        ConnectRenderer_args args = new ConnectRenderer_args();
        args.Host = host;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public short recv_ConnectRenderer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ConnectRenderer_result result = new ConnectRenderer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ConnectRenderer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DisconnectRenderer(AsyncCallback callback, object state, short rendererId)
      {
        return send_DisconnectRenderer(callback, state, rendererId);
      }

      public void End_DisconnectRenderer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DisconnectRenderer();
      }

      #endif

      public void DisconnectRenderer(short rendererId)
      {
        #if !SILVERLIGHT
        send_DisconnectRenderer(rendererId);
        recv_DisconnectRenderer();

        #else
        var asyncResult = Begin_DisconnectRenderer(null, null, rendererId);
        End_DisconnectRenderer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DisconnectRenderer(AsyncCallback callback, object state, short rendererId)
      #else
      public void send_DisconnectRenderer(short rendererId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DisconnectRenderer", TMessageType.Call, seqid_));
        DisconnectRenderer_args args = new DisconnectRenderer_args();
        args.RendererId = rendererId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DisconnectRenderer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DisconnectRenderer_result result = new DisconnectRenderer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MovePlayer(AsyncCallback callback, object state, sbyte number, Direction direction)
      {
        return send_MovePlayer(callback, state, number, direction);
      }

      public void End_MovePlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MovePlayer();
      }

      #endif

      public void MovePlayer(sbyte number, Direction direction)
      {
        #if !SILVERLIGHT
        send_MovePlayer(number, direction);
        recv_MovePlayer();

        #else
        var asyncResult = Begin_MovePlayer(null, null, number, direction);
        End_MovePlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MovePlayer(AsyncCallback callback, object state, sbyte number, Direction direction)
      #else
      public void send_MovePlayer(sbyte number, Direction direction)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MovePlayer", TMessageType.Call, seqid_));
        MovePlayer_args args = new MovePlayer_args();
        args.Number = number;
        args.Direction = direction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MovePlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MovePlayer_result result = new MovePlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.gameError) {
          throw result.GameError;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_JumpPlayer(AsyncCallback callback, object state, sbyte number, Direction direction)
      {
        return send_JumpPlayer(callback, state, number, direction);
      }

      public void End_JumpPlayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_JumpPlayer();
      }

      #endif

      public void JumpPlayer(sbyte number, Direction direction)
      {
        #if !SILVERLIGHT
        send_JumpPlayer(number, direction);
        recv_JumpPlayer();

        #else
        var asyncResult = Begin_JumpPlayer(null, null, number, direction);
        End_JumpPlayer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_JumpPlayer(AsyncCallback callback, object state, sbyte number, Direction direction)
      #else
      public void send_JumpPlayer(sbyte number, Direction direction)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("JumpPlayer", TMessageType.Call, seqid_));
        JumpPlayer_args args = new JumpPlayer_args();
        args.Number = number;
        args.Direction = direction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_JumpPlayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        JumpPlayer_result result = new JumpPlayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.gameError) {
          throw result.GameError;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGames(AsyncCallback callback, object state)
      {
        return send_GetGames(callback, state);
      }

      public List<string> End_GetGames(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGames();
      }

      #endif

      public List<string> GetGames()
      {
        #if !SILVERLIGHT
        send_GetGames();
        return recv_GetGames();

        #else
        var asyncResult = Begin_GetGames(null, null);
        return End_GetGames(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGames(AsyncCallback callback, object state)
      #else
      public void send_GetGames()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGames", TMessageType.Call, seqid_));
        GetGames_args args = new GetGames_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetGames()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGames_result result = new GetGames_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGames failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGameInfo(AsyncCallback callback, object state, string name)
      {
        return send_GetGameInfo(callback, state, name);
      }

      public GameInfo End_GetGameInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGameInfo();
      }

      #endif

      public GameInfo GetGameInfo(string name)
      {
        #if !SILVERLIGHT
        send_GetGameInfo(name);
        return recv_GetGameInfo();

        #else
        var asyncResult = Begin_GetGameInfo(null, null, name);
        return End_GetGameInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGameInfo(AsyncCallback callback, object state, string name)
      #else
      public void send_GetGameInfo(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGameInfo", TMessageType.Call, seqid_));
        GetGameInfo_args args = new GetGameInfo_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public GameInfo recv_GetGameInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGameInfo_result result = new GetGameInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.gameError) {
          throw result.GameError;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGameInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LoadGame(AsyncCallback callback, object state, string name)
      {
        return send_LoadGame(callback, state, name);
      }

      public void End_LoadGame(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_LoadGame();
      }

      #endif

      public void LoadGame(string name)
      {
        #if !SILVERLIGHT
        send_LoadGame(name);
        recv_LoadGame();

        #else
        var asyncResult = Begin_LoadGame(null, null, name);
        End_LoadGame(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LoadGame(AsyncCallback callback, object state, string name)
      #else
      public void send_LoadGame(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LoadGame", TMessageType.Call, seqid_));
        LoadGame_args args = new LoadGame_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_LoadGame()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadGame_result result = new LoadGame_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.gameError) {
          throw result.GameError;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResetLevel(AsyncCallback callback, object state)
      {
        return send_ResetLevel(callback, state);
      }

      public void End_ResetLevel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ResetLevel();
      }

      #endif

      public void ResetLevel()
      {
        #if !SILVERLIGHT
        send_ResetLevel();
        recv_ResetLevel();

        #else
        var asyncResult = Begin_ResetLevel(null, null);
        End_ResetLevel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResetLevel(AsyncCallback callback, object state)
      #else
      public void send_ResetLevel()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Call, seqid_));
        ResetLevel_args args = new ResetLevel_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ResetLevel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetLevel_result result = new ResetLevel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["ConnectRenderer"] = ConnectRenderer_Process;
        processMap_["DisconnectRenderer"] = DisconnectRenderer_Process;
        processMap_["MovePlayer"] = MovePlayer_Process;
        processMap_["JumpPlayer"] = JumpPlayer_Process;
        processMap_["GetGames"] = GetGames_Process;
        processMap_["GetGameInfo"] = GetGameInfo_Process;
        processMap_["LoadGame"] = LoadGame_Process;
        processMap_["ResetLevel"] = ResetLevel_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        try
        {
          iface_.Ping();
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ConnectRenderer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ConnectRenderer_args args = new ConnectRenderer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ConnectRenderer_result result = new ConnectRenderer_result();
        try
        {
          result.Success = iface_.ConnectRenderer(args.Host, args.Port);
          oprot.WriteMessageBegin(new TMessage("ConnectRenderer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ConnectRenderer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DisconnectRenderer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DisconnectRenderer_args args = new DisconnectRenderer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DisconnectRenderer_result result = new DisconnectRenderer_result();
        try
        {
          iface_.DisconnectRenderer(args.RendererId);
          oprot.WriteMessageBegin(new TMessage("DisconnectRenderer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DisconnectRenderer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MovePlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MovePlayer_args args = new MovePlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MovePlayer_result result = new MovePlayer_result();
        try
        {
          try
          {
            iface_.MovePlayer(args.Number, args.Direction);
          }
          catch (GameError gameError)
          {
            result.GameError = gameError;
          }
          oprot.WriteMessageBegin(new TMessage("MovePlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("MovePlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void JumpPlayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        JumpPlayer_args args = new JumpPlayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        JumpPlayer_result result = new JumpPlayer_result();
        try
        {
          try
          {
            iface_.JumpPlayer(args.Number, args.Direction);
          }
          catch (GameError gameError)
          {
            result.GameError = gameError;
          }
          oprot.WriteMessageBegin(new TMessage("JumpPlayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("JumpPlayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGames_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGames_args args = new GetGames_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGames_result result = new GetGames_result();
        try
        {
          result.Success = iface_.GetGames();
          oprot.WriteMessageBegin(new TMessage("GetGames", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGames", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGameInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGameInfo_args args = new GetGameInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGameInfo_result result = new GetGameInfo_result();
        try
        {
          try
          {
            result.Success = iface_.GetGameInfo(args.Name);
          }
          catch (GameError gameError)
          {
            result.GameError = gameError;
          }
          oprot.WriteMessageBegin(new TMessage("GetGameInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGameInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadGame_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadGame_args args = new LoadGame_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadGame_result result = new LoadGame_result();
        try
        {
          try
          {
            iface_.LoadGame(args.Name);
          }
          catch (GameError gameError)
          {
            result.GameError = gameError;
          }
          oprot.WriteMessageBegin(new TMessage("LoadGame", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("LoadGame", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetLevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetLevel_args args = new ResetLevel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetLevel_result result = new ResetLevel_result();
        try
        {
          iface_.ResetLevel();
          oprot.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ResetLevel", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Ping_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectRenderer_args : TBase
    {
      private string _host;
      private int _port;

      public string Host
      {
        get
        {
          return _host;
        }
        set
        {
          __isset.host = true;
          this._host = value;
        }
      }

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool host;
        public bool port;
      }

      public ConnectRenderer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Host = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectRenderer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Host != null && __isset.host) {
            field.Name = "host";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Host);
            oprot.WriteFieldEnd();
          }
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectRenderer_args(");
        bool __first = true;
        if (Host != null && __isset.host) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Host: ");
          __sb.Append(Host);
        }
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectRenderer_result : TBase
    {
      private short _success;

      public short Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ConnectRenderer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I16) {
                  Success = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectRenderer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I16;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectRenderer_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectRenderer_args : TBase
    {
      private short _rendererId;

      public short RendererId
      {
        get
        {
          return _rendererId;
        }
        set
        {
          __isset.rendererId = true;
          this._rendererId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rendererId;
      }

      public DisconnectRenderer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  RendererId = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectRenderer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.rendererId) {
            field.Name = "rendererId";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(RendererId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectRenderer_args(");
        bool __first = true;
        if (__isset.rendererId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RendererId: ");
          __sb.Append(RendererId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectRenderer_result : TBase
    {

      public DisconnectRenderer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectRenderer_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectRenderer_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MovePlayer_args : TBase
    {
      private sbyte _number;
      private Direction _direction;

      public sbyte Number
      {
        get
        {
          return _number;
        }
        set
        {
          __isset.number = true;
          this._number = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Direction"/>
      /// </summary>
      public Direction Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool number;
        public bool direction;
      }

      public MovePlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Byte) {
                  Number = iprot.ReadByte();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Direction = (Direction)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MovePlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.number) {
            field.Name = "number";
            field.Type = TType.Byte;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteByte(Number);
            oprot.WriteFieldEnd();
          }
          if (__isset.direction) {
            field.Name = "direction";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Direction);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MovePlayer_args(");
        bool __first = true;
        if (__isset.number) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Number: ");
          __sb.Append(Number);
        }
        if (__isset.direction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direction: ");
          __sb.Append(Direction);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MovePlayer_result : TBase
    {
      private GameError _gameError;

      public GameError GameError
      {
        get
        {
          return _gameError;
        }
        set
        {
          __isset.gameError = true;
          this._gameError = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool gameError;
      }

      public MovePlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  GameError = new GameError();
                  GameError.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MovePlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.gameError) {
            if (GameError != null) {
              field.Name = "GameError";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              GameError.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MovePlayer_result(");
        bool __first = true;
        if (GameError != null && __isset.gameError) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GameError: ");
          __sb.Append(GameError== null ? "<null>" : GameError.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class JumpPlayer_args : TBase
    {
      private sbyte _number;
      private Direction _direction;

      public sbyte Number
      {
        get
        {
          return _number;
        }
        set
        {
          __isset.number = true;
          this._number = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Direction"/>
      /// </summary>
      public Direction Direction
      {
        get
        {
          return _direction;
        }
        set
        {
          __isset.direction = true;
          this._direction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool number;
        public bool direction;
      }

      public JumpPlayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Byte) {
                  Number = iprot.ReadByte();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Direction = (Direction)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("JumpPlayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.number) {
            field.Name = "number";
            field.Type = TType.Byte;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteByte(Number);
            oprot.WriteFieldEnd();
          }
          if (__isset.direction) {
            field.Name = "direction";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Direction);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("JumpPlayer_args(");
        bool __first = true;
        if (__isset.number) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Number: ");
          __sb.Append(Number);
        }
        if (__isset.direction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direction: ");
          __sb.Append(Direction);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class JumpPlayer_result : TBase
    {
      private GameError _gameError;

      public GameError GameError
      {
        get
        {
          return _gameError;
        }
        set
        {
          __isset.gameError = true;
          this._gameError = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool gameError;
      }

      public JumpPlayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  GameError = new GameError();
                  GameError.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("JumpPlayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.gameError) {
            if (GameError != null) {
              field.Name = "GameError";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              GameError.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("JumpPlayer_result(");
        bool __first = true;
        if (GameError != null && __isset.gameError) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GameError: ");
          __sb.Append(GameError== null ? "<null>" : GameError.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGames_args : TBase
    {

      public GetGames_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGames_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGames_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGames_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGames_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      string _elem2;
                      _elem2 = iprot.ReadString();
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGames_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter3 in Success)
                {
                  oprot.WriteString(_iter3);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGames_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameInfo_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public GetGameInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGameInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGameInfo_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGameInfo_result : TBase
    {
      private GameInfo _success;
      private GameError _gameError;

      public GameInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public GameError GameError
      {
        get
        {
          return _gameError;
        }
        set
        {
          __isset.gameError = true;
          this._gameError = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool gameError;
      }

      public GetGameInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new GameInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  GameError = new GameError();
                  GameError.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGameInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.gameError) {
            if (GameError != null) {
              field.Name = "GameError";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              GameError.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGameInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (GameError != null && __isset.gameError) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GameError: ");
          __sb.Append(GameError== null ? "<null>" : GameError.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadGame_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public LoadGame_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadGame_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadGame_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadGame_result : TBase
    {
      private GameError _gameError;

      public GameError GameError
      {
        get
        {
          return _gameError;
        }
        set
        {
          __isset.gameError = true;
          this._gameError = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool gameError;
      }

      public LoadGame_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  GameError = new GameError();
                  GameError.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadGame_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.gameError) {
            if (GameError != null) {
              field.Name = "GameError";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              GameError.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadGame_result(");
        bool __first = true;
        if (GameError != null && __isset.gameError) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GameError: ");
          __sb.Append(GameError== null ? "<null>" : GameError.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetLevel_args : TBase
    {

      public ResetLevel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ResetLevel_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ResetLevel_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetLevel_result : TBase
    {

      public ResetLevel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ResetLevel_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ResetLevel_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
